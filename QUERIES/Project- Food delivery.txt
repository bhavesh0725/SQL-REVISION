Project - Food delivery
Welcome to the Project to help you practice everything that you learnt about Queries.

Task 1 
Imagine you are the Analytics manager in your favourite local food delivery company.
It is lunch-time and you have received food orders in your database and now need to ensure no one goes hungry - else you will get a lot of negative ratings.

Your database is named 'Orders' and has the following columns

order_id (INT)
order_time (DOUBLE)
customer_id (VARCHAR)
customer_name (VARCHAR)
address_pincode (INT)
apartment_floor (INT)
Go ahead and check the entries in the table in the IDE.
Limit your results to 3 rows.

sol:
/* Write a query to check the entries in the table.
Restrict your query to return 3 rows. */
select * from orders limit 3;


output:
┌────────────┬────────────┬─────────────┬───────────────┬─────────────────┬─────────────────┐
│  order_id  │ order_time │ customer_id │ customer_name │ address_pincode │ apartment_floor │
├────────────┼────────────┼─────────────┼───────────────┼─────────────────┼─────────────────┤
│ 2304111234 │ 11.55      │ 53421       │ Jack          │ 122001          │ 2               │
│ 2304111235 │ 12.05      │ 12445       │ Anna          │ 122001          │ 3               │
│ 2304111236 │ 12.05      │ 12345       │ Alba          │ 122001          │ 4               │
└────────────┴────────────┴─────────────┴───────────────┴─────────────────┴─────────────────┘




Task2 
Project - Food delivery
Write a query to output the distinct pin-codes from where orders have been received.

Expected output
┌─────────────────┐
│ address_pincode │
├─────────────────┤
│ 122001          │
│ 122002          │
│ 122003          │
│ 122004          │
└─────────────────┘
Your database is named 'Orders' and has the following columns

order_id (INT)
order_time (DOUBLE)
customer_id (VARCHAR)
customer_name (VARCHAR)
address_pincode (INT)
apartment_floor (INT)

sol:
/* Write a query to output the distinct pin-codes from where orders have been received. */
select distinct address_pincode from orders; 


┌─────────────────┐
│ address_pincode │
├─────────────────┤
│ 122001          │
│ 122002          │
│ 122003          │
│ 122004          │
└─────────────────┘





Task 3
Project - Food delivery
Write a query to output the all the data for orders received between 12 pm and 1 pm.

Note that 1 pm in 24 hour conversion is represented as 13
Expected output
┌────────────┬────────────┬─────────────┬───────────────┬─────────────────┬─────────────────┐
│  order_id  │ order_time │ customer_id │ customer_name │ address_pincode │ apartment_floor │
├────────────┼────────────┼─────────────┼───────────────┼─────────────────┼─────────────────┤
│ 2304111235 │ 12.05      │ 12445       │ Anna          │ 122001          │ 3               │
│ 2304111236 │ 12.05      │ 12345       │ Alba          │ 122001          │ 4               │
│ 2304111237 │ 12.15      │ 22212       │ John          │ 122002          │ 5               │
│ 2304111238 │ 12.16      │ 22213       │ Diya          │ 122002          │ 3               │
│ 2304111239 │ 12.18      │ 22214       │ Avni          │ 122002          │ 3               │
│ 2304111240 │ 12.45      │ 12445       │ Anna          │ 122001          │ 3               │
│ 2304111241 │ 12.55      │ 53421       │ Jack          │ 122001          │ 2               │
│ 2304111243 │ 12.58      │ 22216       │ Salim         │ 122003          │ 4               │
└────────────┴────────────┴─────────────┴───────────────┴─────────────────┴─────────────────┘
Your database is named 'Orders' and has the following columns

order_id (INT)
order_time (DOUBLE)
customer_id (VARCHAR)
customer_name (VARCHAR)
address_pincode (INT)
apartment_floor (INT)

sol:

/* Write a query to output the all the data for orders received between 12 pm and 1 pm. */
select * from orders where order_time between 12 and 13;


output:
┌────────────┬────────────┬─────────────┬───────────────┬─────────────────┬─────────────────┐
│  order_id  │ order_time │ customer_id │ customer_name │ address_pincode │ apartment_floor │
├────────────┼────────────┼─────────────┼───────────────┼─────────────────┼─────────────────┤
│ 2304111235 │ 12.05      │ 12445       │ Anna          │ 122001          │ 3               │
│ 2304111236 │ 12.05      │ 12345       │ Alba          │ 122001          │ 4               │
│ 2304111237 │ 12.15      │ 22212       │ John          │ 122002          │ 5               │
│ 2304111238 │ 12.16      │ 22213       │ Diya          │ 122002          │ 3               │
│ 2304111239 │ 12.18      │ 22214       │ Avni          │ 122002          │ 3               │
│ 2304111240 │ 12.45      │ 12445       │ Anna          │ 122001          │ 3               │
│ 2304111241 │ 12.55      │ 53421       │ Jack          │ 122001          │ 2               │
│ 2304111243 │ 12.58      │ 22216       │ Salim         │ 122003          │ 4               │
└────────────┴────────────┴─────────────┴───────────────┴─────────────────┴─────────────────┘



Task4:

Project - Food delivery
Write a query to output the customer id of all distinct users whose name end with the letter 'a'.

Expected output
┌─────────────┐
│ customer_id │
├─────────────┤
│ 12445       │
│ 12345       │
│ 22213       │
│ 22217       │
│ 22219       │
└─────────────┘
Your database is named 'Orders' and has the following columns

order_id (INT)
order_time (DOUBLE)
customer_id (VARCHAR)
customer_name (VARCHAR)
address_pincode (INT)
apartment_floor (INT)

sol:
/* Write a query to output the userids of all distinct users whose name end with the letter 'a' */
select distinct customer_id from orders where customer_name like "%a";

output:
┌─────────────┐
│ customer_id │
├─────────────┤
│ 12445       │
│ 12345       │
│ 22213       │
│ 22217       │
│ 22219       │
└─────────────┘



Task5

Project - Food delivery
You want to ensure that your delivery boys have to climb the least floors.
Write a query to output the entire data sorted by the floors in an ascending order.

Expected output
┌────────────┬────────────┬─────────────┬───────────────┬─────────────────┬─────────────────┐
│  order_id  │ order_time │ customer_id │ customer_name │ address_pincode │ apartment_floor │
├────────────┼────────────┼─────────────┼───────────────┼─────────────────┼─────────────────┤
│ 2304111244 │ 13.13      │ 22217       │ Naisha        │ 122003          │ 0               │
│ 2304111246 │ 13.25      │ 22219       │ Haifa         │ 122004          │ 0               │
│ 2304111245 │ NULL       │ 22218       │ Priti         │ 122004          │ 1               │
│ 2304111234 │ 11.55      │ 53421       │ Jack          │ 122001          │ 2               │
│ 2304111241 │ 12.55      │ 53421       │ Jack          │ 122001          │ 2               │
│ 2304111245 │ 13.25      │ 22218       │ Priti         │ 122004          │ 2               │
│ 2304111235 │ 12.05      │ 12445       │ Anna          │ 122001          │ 3               │
│ 2304111238 │ 12.16      │ 22213       │ Diya          │ 122002          │ 3               │
│ 2304111239 │ 12.18      │ 22214       │ Avni          │ 122002          │ 3               │
│ 2304111240 │ 12.45      │ 12445       │ Anna          │ 122001          │ 3               │
│ 2304111242 │ NULL       │ 22215       │ Marie         │ 122003          │ 3               │
│ 2304111236 │ 12.05      │ 12345       │ Alba          │ 122001          │ 4               │
│ 2304111243 │ 12.58      │ 22216       │ Salim         │ 122003          │ 4               │
│ 2304111237 │ 12.15      │ 22212       │ John          │ 122002          │ 5               │
└────────────┴────────────┴─────────────┴───────────────┴─────────────────┴─────────────────┘
Your database is named 'Orders' and has the following columns

order_id (INT)
order_time (DOUBLE)
customer_id (VARCHAR)
customer_name (VARCHAR)
address_pincode (INT)
apartment_floor (INT)



sol:
/* You want to ensure that your delivery boys have to climb the least floors.
Write a query to sort the data in an ascending order. */

select * from orders order by apartment_floor;


output:

┌────────────┬────────────┬─────────────┬───────────────┬─────────────────┬─────────────────┐
│  order_id  │ order_time │ customer_id │ customer_name │ address_pincode │ apartment_floor │
├────────────┼────────────┼─────────────┼───────────────┼─────────────────┼─────────────────┤
│ 2304111244 │ 13.13      │ 22217       │ Naisha        │ 122003          │ 0               │
│ 2304111246 │ 13.25      │ 22219       │ Haifa         │ 122004          │ 0               │
│ 2304111245 │ NULL       │ 22218       │ Priti         │ 122004          │ 1               │
│ 2304111234 │ 11.55      │ 53421       │ Jack          │ 122001          │ 2               │
│ 2304111241 │ 12.55      │ 53421       │ Jack          │ 122001          │ 2               │
│ 2304111245 │ 13.25      │ 22218       │ Priti         │ 122004          │ 2               │
│ 2304111235 │ 12.05      │ 12445       │ Anna          │ 122001          │ 3               │
│ 2304111238 │ 12.16      │ 22213       │ Diya          │ 122002          │ 3               │
│ 2304111239 │ 12.18      │ 22214       │ Avni          │ 122002          │ 3               │
│ 2304111240 │ 12.45      │ 12445       │ Anna          │ 122001          │ 3               │
│ 2304111242 │ NULL       │ 22215       │ Marie         │ 122003          │ 3               │
│ 2304111236 │ 12.05      │ 12345       │ Alba          │ 122001          │ 4               │
│ 2304111243 │ 12.58      │ 22216       │ Salim         │ 122003          │ 4               │
│ 2304111237 │ 12.15      │ 22212       │ John          │ 122002          │ 5               │
└────────────┴────────────┴─────────────┴───────────────┴─────────────────┴─────────────────┘


Task 6 

Project - Food delivery
Your order management system sometimes has a bug and does not capture the order_time - i.e., order_time is blank.
Write a query to output the order ids which faced this bug.

Expected output
┌────────────┐
│  order_id  │
├────────────┤
│ 2304111242 │
│ 2304111245 │
└────────────┘
Your database is named 'Orders' and has the following columns

order_id (INT)
order_time (DOUBLE)
customer_id (VARCHAR)
customer_name (VARCHAR)
address_pincode (INT)
apartment_floor (INT)

sol:
/* Your order management system sometimes has a bug and does not capture the order_time
i.e. order_time is blank.
Write a query to output the order ids which faced this bug. */
select order_id from orders where order_time is null;


output:
┌────────────┐
│  order_id  │
├────────────┤
│ 2304111242 │
│ 2304111245 │
└────────────┘


tasks 7:
Project - Food delivery
You are given a query to do the following but the query is incorrect.

Output the customer_names for the following query conditions

Customers who live in pincodes 122001 OR 122002
Who placed an order before 12.30 PM
Who stay on the 3rd floor or higher
Expected output
┌───────────────┐
│ customer_name │
├───────────────┤
│ Anna          │
│ Alba          │
│ John          │
│ Diya          │
│ Avni          │
└───────────────┘
Your database is named 'Orders' and has the following columns

order_id (INT)
order_time (DOUBLE)
customer_id (VARCHAR)
customer_name (VARCHAR)
address_pincode (INT)
apartment_floor (INT)


sol:
/* The query given below is incorrect. Debug this query to solve the problem */

select customer_name
from Orders
where (address_pincode = 122001 OR address_pincode = 122002)  -- Mistake I made, brackets required for the 'OR' condition
and order_time < 12.3
and apartment_floor >= 3;

output:
┌───────────────┐
│ customer_name │
├───────────────┤
│ Anna          │
│ Alba          │
│ John          │
│ Diya          │
│ Avni          │
└───────────────┘
